{"version":3,"sources":["logic/operate.js","components/Calbuttons.js","components/Calculator.js","logic/calculate.js","App.js","reportWebVitals.js","index.js"],"names":["operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","mod","Error","Buttons","props","onClick","className","map","btn","type","e","Calculator","useState","total","next","state","setState","display","event","buttonName","target","innerText","result","obj","match","includes","parseFloat","calculate","undefined","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAEe,SAASA,EAAQC,EAAWC,EAAWC,GACpD,IAAMC,EAAMC,IAAIJ,GACVK,EAAMD,IAAIH,GAChB,GAAkB,MAAdC,EACF,OAAOC,EAAIG,KAAKD,GAAKE,WAEvB,GAAkB,MAAdL,EACF,OAAOC,EAAIK,MAAMH,GAAKE,WAExB,GAAkB,MAAdL,EACF,OAAOC,EAAIM,MAAMJ,GAAKE,WAExB,GAAkB,SAAdL,EACF,OAAOC,EAAIO,IAAIL,GAAKE,WAEtB,GAAkB,MAAdL,EACF,OAAOC,EAAIQ,IAAIN,GAAKE,WAEtB,MAAMK,MAAM,sBAAD,OAAuBV,EAAvB,M,WCREW,EAVC,SAACC,GACf,IAAQC,EAAYD,EAAZC,QAER,OACE,qBAAKC,UAAU,UAAf,SAFc,CAAC,KAAM,MAAO,IAAK,OAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,IAAK,KAG7EC,KAAI,SAACC,GAAD,OAAS,wBAAkBC,KAAK,SAASJ,QAAS,SAACK,GAAD,OAAOL,EAAQK,IAAxD,SAA6DF,GAAhDA,SCwB1BG,EA3BI,WACjB,MAA0BC,mBAAS,CACjCC,MAAO,KACPC,KAAM,KACNtB,UAAW,OAHb,mBAAOuB,EAAP,KAAcC,EAAd,KAiBMC,GAAWF,EAAMF,OAAS,KAAOE,EAAMvB,WAAa,KAAOuB,EAAMD,MAAQ,IAC/E,OACE,sBAAKR,UAAU,aAAf,UACE,mBAAGA,UAAU,SAAb,SAAuBW,IACvB,cAAC,EAAD,CAASZ,QAfM,SAACa,GAClB,IAAMC,EAAaD,EAAME,OAAOC,UAC1BC,ECEK,SAAmBC,EAAKJ,GACrC,MAAmB,OAAfA,EACK,CACLN,MAAO,KACPC,KAAM,KACNtB,UAAW,MAIF2B,EArBCK,MAAM,UAsBC,MAAfL,GAAmC,MAAbI,EAAIT,KACrB,GAGLS,EAAI/B,UACF+B,EAAIT,KACC,CAAEA,KAAMS,EAAIT,KAAOK,GAErB,CAAEL,KAAMK,GAGbI,EAAIT,KACC,CACLA,KAAMS,EAAIT,KAAOK,EACjBN,MAAO,MAGJ,CACLC,KAAMK,EACNN,MAAO,MAIQ,MAAfM,EACEI,EAAIT,KACFS,EAAIT,KAAKW,SAAS,KACb,GAEF,CAAEX,KAAK,GAAD,OAAKS,EAAIT,KAAT,MAEXS,EAAI/B,UACC,CAAEsB,KAAM,MAEbS,EAAIV,MACFU,EAAIV,MAAMY,SAAS,KACd,GAEF,CAAEZ,MAAM,GAAD,OAAKU,EAAIV,MAAT,MAET,CAAEA,MAAO,MAGC,MAAfM,EACEI,EAAIT,MAAQS,EAAI/B,UACX,CACLqB,MAAOxB,EAAQkC,EAAIV,MAAOU,EAAIT,KAAMS,EAAI/B,WACxCsB,KAAM,KACNtB,UAAW,MAIR,GAGU,QAAf2B,EACEI,EAAIT,KACC,CAAEA,OAAQ,EAAIY,WAAWH,EAAIT,OAAOjB,YAEzC0B,EAAIV,MACC,CAAEA,QAAS,EAAIa,WAAWH,EAAIV,QAAQhB,YAExC,GAYL0B,EAAI/B,UACC,CACLqB,MAAOxB,EAAQkC,EAAIV,MAAOU,EAAIT,KAAMS,EAAI/B,WACxCsB,KAAM,KACNtB,UAAW2B,GAOVI,EAAIT,KAKF,CACLD,MAAOU,EAAIT,KACXA,KAAM,KACNtB,UAAW2B,GAPJ,CAAE3B,UAAW2B,GDjGLQ,CAAUZ,EAAOI,GACxB3B,EAA2BuB,EAA3BvB,UAAWsB,EAAgBC,EAAhBD,KAAMD,EAAUE,EAAVF,MACzBG,EAAS,CACPxB,eAAkCoC,IAArBN,EAAO9B,UAA2BA,EAAY8B,EAAO9B,UAClEsB,UAAwBc,IAAhBN,EAAOR,KAAsBA,EAAOQ,EAAOR,KACnDD,WAA0Be,IAAjBN,EAAOT,MAAuBA,EAAQS,EAAOT,eEZ7CgB,EAFH,kBAAM,cAAC,EAAD,KCUHC,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5926b0cc.chunk.js","sourcesContent":["import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    return one.div(two).toString();\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","/* eslint-disable react/prop-types */\n\nconst Buttons = (props) => {\n  const { onClick } = props;\n  const buttons = ['AC', '+/-', '%', 'รท', 7, 8, 9, 'x', 4, 5, 6, '-', 1, 2, 3, '+', 0, '.', '='];\n  return (\n    <div className=\"buttons\">\n      {buttons.map((btn) => <button key={btn} type=\"button\" onClick={(e) => onClick(e)}>{btn}</button>)}\n    </div>\n  );\n};\n\nexport default Buttons;\n","import React, { useState } from 'react';\nimport calculate from '../logic/calculate';\nimport Buttons from './Calbuttons';\n\nconst Calculator = () => {\n  const [state, setState] = useState({\n    total: null,\n    next: null,\n    operation: null,\n  });\n\n  const btnClicked = (event) => {\n    const buttonName = event.target.innerText;\n    const result = calculate(state, buttonName);\n    const { operation, next, total } = state;\n    setState({\n      operation: ((result.operation === undefined) ? operation : result.operation),\n      next: ((result.next === undefined) ? next : result.next),\n      total: ((result.total === undefined) ? total : result.total),\n    });\n  };\n\n  const display = (state.total || '') + (state.operation || '') + (state.next || '');\n  return (\n    <div className=\"calculator\">\n      <p className=\"result\">{display}</p>\n      <Buttons onClick={btnClicked} />\n    </div>\n  );\n};\n\nexport default Calculator;\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return {};\n      }\n      return { next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total}.` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import React from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator';\n\nconst App = () => <Calculator />;\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}